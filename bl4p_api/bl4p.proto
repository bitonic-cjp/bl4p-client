syntax = "proto3";

/*
    Copyright (C) 2018-2021 by Bitonic B.V.

    This file is part of the BL4P API.

    The BL4P API is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The BL4P API is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the BL4P API. If not, see <http://www.gnu.org/licenses/>.
*/

/*
# Connecting

    A single API endpoint is used for both:
    - public information (e.g. listening to engine events, getting asset definitions)
    - account operations (e.g. querying account mutations, managing orders)

    Client software should make a WebSocket connection to:

        wss://bl3p.eu

# Message framing and encoding

    Client-to-server:
        1. a 32-bit little-endian unsigned integer specifying a Protobuf request type
        2. a Protobuf-encoded message of the specified type

    Requests whose protobuf message begins with an `api_key` field are authenticated
    requests. For authenticated requests:
    - the `api_key` field must be set to the 16-byte uuid of the API key you wish you use
    - parts 1 and 2 are followed by a 64 byte HMAC_SHA512 checksum over parts 1 and 2,
      using the 64 byte secret corresponding to the specified key.

    For requests that contain a request id, the request id must be greater than the request id of any
    previous request submitted using the same API key. That is, request ids also serve as nonces.

    The nonce and signature ensure that if a man-in-the-middle compromises the TLS
    connection and acquires the ability to drop and inject messages, they cannot replay
    existing requests or sign new requests.

    Server-to-client:
        1. a 32-bit little-endian unsigned integer specifying a Protobuf message type
        2. a Protobuf-encoded message of the specified type

# Requests and responses

    Most requests produce a single response, which is either of the result type
    corresponding to the request type, or an error message.

    Responses include the request id specified in the corresponding request.

    Requests are handled asynchronously, and responses may be received in any order.
*/

import "offer.proto";

enum MessageType {
    Msg_Error = 0;

    // The range 0x1000 to 0x2000 is reserved for Bl4p.
    Msg_BL4P_Start             = 0x1000;
    Msg_BL4P_StartResult       = 0x1001;
    Msg_BL4P_CancelStart       = 0x1002;
    Msg_BL4P_CancelStartResult = 0x1003;
    Msg_BL4P_Send              = 0x1004;
    Msg_BL4P_SendResult        = 0x1005;
    Msg_BL4P_Receive           = 0x1006;
    Msg_BL4P_ReceiveResult     = 0x1007;
    Msg_BL4P_GetStatus         = 0x1008;
    Msg_BL4P_GetStatusResult   = 0x1009;
    Msg_BL4P_SelfReport        = 0x110A;
    Msg_BL4P_SelfReportResult  = 0x110B;

    Msg_BL4P_AddOffer          = 0x1100;
    Msg_BL4P_AddOfferResult    = 0x1101;
    Msg_BL4P_ListOffers        = 0x1102;
    Msg_BL4P_ListOffersResult  = 0x1103;
    Msg_BL4P_RemoveOffer       = 0x1104;
    Msg_BL4P_RemoveOfferResult = 0x1105;
    Msg_BL4P_FindOffers        = 0x1106;
    Msg_BL4P_FindOffersResult  = 0x1107;
};

enum ErrorReason {
    Err_MalformedRequest = 0;
    Err_NoSuchEngine = 1;
    Err_NoSuchOrder = 2;
    Err_InvalidAsset = 3;
    Err_InvalidAccount = 4;
    Err_InvalidFilter = 5;
    Err_InvalidPair = 6;
    Err_InvalidSide = 7;
    Err_InvalidLimit = 8;
    Err_BalanceInsufficient = 9;
    Err_InvalidAmount = 10;
    Err_RequestTimeout = 11;
    Err_RequestQueueFull = 12;
    Err_Unauthorized = 13;
    Err_VolumeNotPositive = 14;
    Err_BackendUnavailable = 15;
    Err_MarketOrderWouldNotMatch = 16;
    Err_OrderWouldSelfTrade = 17;
    Err_RateLimitExceeded = 18;
    Err_PriceTooHigh = 19;
    Err_PriceNotPositive = 20;
    Err_FundsTooHigh = 21;
    Err_FundsNotPositive = 22;
    Err_VolumeTooHigh = 23;
    Err_InstructionNotPickedUp = 24;
    Err_PriceMissing = 25;
    Err_MissingVolumeOrFunds = 26;
    Err_TooManyExecutions = 27;
    Err_Unknown = 28;
}

enum BL4P_TransactionStatus {
    _waiting_for_selfreport = 0;
    _waiting_for_sender = 1;
    _waiting_for_receiver = 2;
    _sender_timeout = 3;
    _receiver_timeout = 4;
    _completed = 5;
    _canceled = 6;
}

message BL4P_Amount {
    uint64 amount = 1;
}

message BL4P_CryptoData {
	bytes data = 1; //Must be fixed-length 256-bit
}

message Error {
    uint64 request = 1;
    ErrorReason reason = 2;
}

message BL4P_Start {
	bytes api_key = 1;
    uint64 request = 2;
    BL4P_Amount amount = 3;
    uint32 sender_timeout_delta_ms = 4;
    uint32 locked_timeout_delta_s = 5;
    bool receiver_pays_fee = 6;
}

message BL4P_StartResult {
    uint64 request = 1;
    BL4P_Amount sender_amount = 2;
    BL4P_Amount receiver_amount = 3;
    BL4P_CryptoData payment_hash = 4;
}

message BL4P_SelfReportContents {
    message pair {
        string name = 1;
        string value = 2;
    }
    repeated pair items = 1;
}

message BL4P_SelfReport {
	bytes api_key = 1;
    uint64 request = 2;
    bytes report = 3; //serialized BL4P_SelfReportContents
    bytes signature = 4;
}

message BL4P_SelfReportResult {
    uint64 request = 1;
}

message BL4P_CancelStart {
	bytes api_key = 1;
    uint64 request = 2;
    BL4P_CryptoData payment_hash = 3;
}

message BL4P_CancelStartResult {
    uint64 request = 1;
}

message BL4P_Send {
	bytes api_key = 1;
    uint64 request = 2;
    BL4P_Amount sender_amount = 3;
    BL4P_CryptoData payment_hash = 4;
    uint32 max_locked_timeout_delta_s = 5;

    bytes report = 6; //serialized BL4P_SelfReportContents
    bytes signature = 7;
}

message BL4P_SendResult {
    uint64 request = 1;
    BL4P_CryptoData payment_preimage = 2;
}

message BL4P_Receive {
	bytes api_key = 1;
    uint64 request = 2;
    BL4P_CryptoData payment_preimage = 3;
}

message BL4P_ReceiveResult {
    uint64 request = 1;
}

message BL4P_GetStatus {
	bytes api_key = 1;
    uint64 request = 2;
    BL4P_CryptoData payment_hash = 3;
}

message BL4P_GetStatusResult {
    uint64 request = 1;
    BL4P_TransactionStatus status = 2;
}

message BL4P_AddOffer {
	bytes api_key = 1;
    uint64 request = 2;
    Offer offer = 3;
}

message BL4P_AddOfferResult {
    uint64 request = 1;
    uint64 offerID = 2;
}

message BL4P_ListOffers {
	bytes api_key = 1;
    uint64 request = 2;
}

message BL4P_ListOffersResult {
    uint64 request = 1;

    message Item {
        uint64 offerID = 1;
        Offer offer = 2;
    }
    repeated Item offers = 2;
}

message BL4P_RemoveOffer {
	bytes api_key = 1;
    uint64 request = 2;
    uint64 offerID = 3;
}

message BL4P_RemoveOfferResult {
    uint64 request = 1;
}

message BL4P_FindOffers {
	bytes api_key = 1;
    uint64 request = 2;
    Offer query = 3;
}

message BL4P_FindOffersResult {
    uint64 request = 1;
    repeated Offer offers = 2;
}

